buildscript {
    repositories {
//        jcenter()
        mavenCentral()
        maven {
            name = 'forge'
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            // location of the maven that hosts JEI files
            name = "Progwml6 maven"
            url = "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

archivesBaseName = project.modid

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = project.forge_version
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.mappings
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // useDepAts = true
    replace '{@mod:version}': project.version, '{@mod:id}': project.modid, '{@mc:version}': project.minecraft_version
}

runClient {
    jvmArgs '-Dfml.coreMods.load=ru.craftlogic.coremod.CraftLogicCoremod'
    args '--username', project.username
}

repositories {
    maven {
        name = 'spongepowered'
        url = 'https://repo.spongepowered.org/maven/'
    }
    maven {
        name = 'jei maven'
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = 'mod maven'
        url = "https://modmaven.k-4u.nl"
    }
    mavenCentral()
}

configurations {
    extend
}

mixin {
    add sourceSets.main, "mixins.craftlogic.refmap.json"
}

task repack {
    ext.unzipDir = "build/unzip-dependency"
    outputs.file unzipDir

    doLast {
        for (dependencyFile in configurations.extend) {
            ant.mkdir(dir: unzipDir)
            ant.unzip(src: dependencyFile, dest: unzipDir)
            ant.delete(file: "$unzipDir/META-INF/MANIFEST.MF")
            ant.delete(file: "$unzipDir/META-INF/MUMFREY.SF")
            ant.delete(file: "$unzipDir/META-INF/MUMFREY.RSA")
        }
    }
}

dependencies {
    // https://mvnrepository.com/artifact/org.spongepowered/mixin
    extend(group: 'org.spongepowered', name: 'mixin', version: project.mixin_version) {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }
    // https://mvnrepository.com/artifact/org.codehaus.groovy/groovy
    compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.4'

    deobfCompile "mezz.jei:jei_${project.minecraft_version}:${project.jei_version}:api"
    runtime "mezz.jei:jei_${project.minecraft_version}:${project.jei_version}"

    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    configurations.compile.extendsFrom(configurations.extend)
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    rename '(.+_at.cfg)', 'META-INF/$1'
}

def commonManifest = [
    'FMLAT'        : 'craftlogic_at.cfg',
    'TweakClass'   : 'org.spongepowered.asm.launch.MixinTweaker',
    'TweakOrder'   : '0',
    'MixinConfigs' : 'mixins.craftlogic.json',
    'FMLCorePlugin': 'ru.craftlogic.coremod.CraftLogicCoremod'
]

if (!gradle.startParameter.taskNames.contains('runClient')) {
    println 'Not running'
    commonManifest['FMLCorePluginContainsFMLMod'] = 'true'
    commonManifest['ForceLoadAsMod'] = 'true'
}

jar {
    manifest {
        attributes(commonManifest)
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from 'build/unzip-dependency'

    include '**/*'
}

jar {
    manifest {
        attributes(commonManifest)
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    manifest {
        attributes(commonManifest)
    }
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
    manifest {
        attributes(commonManifest)
    }
}

jar.dependsOn(repack)

artifacts {
    archives srcJar
    archives deobfJar
}
